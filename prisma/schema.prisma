generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shipments {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  quote     Float?   @default(0.0)
  credit    Float?   @default(0.0)
  debit     Float?   @default(0.0)
  status    String?  @default("created")
  from      DateTime
  to        DateTime

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Cargo Cargo @relation(fields: [cargoId], references: [id], onDelete: Cascade)

  userId  String
  cargoId String

  Transactions Transactions[]
}

model Cargo {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  name       String
  type       String
  dimensions String
  weight     Int
  quantity   Int

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Shipments Shipments[]
}

model Transactions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  price     Int
  method    String
  status    String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Shipments Shipments @relation(fields: [shipmentsId], references: [id])

  shipmentsId String
  userId      String
}

model Notifications {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  type      String
  status    String
  message   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Password      Password[]
  Shipments     Shipments[]
  Notifications Notifications[]
  Transactions  Transactions[]
  Cargo         Cargo[]
}

model Password {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  password String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
