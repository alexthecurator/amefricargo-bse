generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model ShipmentInquiries {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  name        String?   @default("New Inquiry")
  description String?   @default("This is a new customer inquiry for a cargoset")
  quote       Float?    @default(0.0)
  credit      Float?    @default(0.0)
  debit       Float?    @default(0.0)
  status      String?   @default("inquired")
  from        DateTime?
  to          DateTime?

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Cargo        Cargo[]
  Transactions Transactions[]
}

model Cargo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String
  type        String
  description String?
  dimensions  String
  weight      Int
  quantity    Int

  User              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  ShipmentInquiries ShipmentInquiries @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  userId     String
  shipmentId String
}

model Transactions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  price     Int
  method    String
  status    String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  ShipmentInquiries ShipmentInquiries @relation(fields: [shipmentsId], references: [id])

  shipmentsId String
  userId      String
}

model Notifications {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  type      String
  status    String
  message   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  payment       Json?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Cargo             Cargo[]
  Password          Password[]
  ShipmentInquiries ShipmentInquiries[]
  Notifications     Notifications[]
  Transactions      Transactions[]
}

model Password {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  password String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
